{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StreamlitAudioRecorder","props","canvasRef","drawWaveform","state","analyser","current","canvas","canvasCtx","getContext","bufferLength","frequencyBinCount","dataArray","Uint8Array","draw","isRecording","animationId","requestAnimationFrame","setState","getByteTimeDomainData","fillStyle","fillRect","width","height","gradient","createLinearGradient","addColorStop","lineWidth","strokeStyle","beginPath","sliceWidth","x","lastY","i","y","moveTo","xc","quadraticCurveTo","lineTo","stroke","cancelAnimationFrame","startRecording","a","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","echoCancellation","noiseSuppression","autoGainControl","stream","audioContext","AudioContext","source","createMediaStreamSource","createAnalyser","connect","mediaRecorder","MediaRecorder","mimeType","audioBitsPerSecond","ondataavailable","e","data","size","prev","chunks","onstop","blob","Blob","type","audioBlob","audioUrl","URL","createObjectURL","arrayBuffer","then","buffer","uint8Array","Streamlit","setComponentValue","arr","Object","fromEntries","entries","start","console","error","stopRecording","stop","getTracks","forEach","track","resetRecording","audioData","downloadRecording","datetime","Date","toLocaleString","replace","filename","document","createElement","style","display","href","download","body","appendChild","click","removeChild","render","theme","borderStyling","border","outline","padding","background","borderRadius","boxShadow","ref","marginBottom","gap","alignItems","id","onClick","color","cursor","transition","controls","src","marginLeft","React","createRef","this","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1c6a7e0e.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  isRecording: boolean\n  mediaRecorder: MediaRecorder | null\n  audioBlob: Blob | null\n  chunks: Blob[]\n  audioUrl: string | null\n  audioData: Float32Array | null\n  analyser: AnalyserNode | null\n  animationId: number | null\n}\n\nclass StreamlitAudioRecorder extends StreamlitComponentBase {\n  private canvasRef: React.RefObject<HTMLCanvasElement | null>\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      isRecording: false,\n      mediaRecorder: null,\n      audioBlob: null,\n      chunks: [],\n      audioUrl: null,\n      audioData: null,\n      analyser: null,\n      animationId: null\n    }\n    this.canvasRef = React.createRef<HTMLCanvasElement | null>()\n  }\n\n  componentDidMount() {\n    // Initialize canvas with a modern look\n    if (this.canvasRef.current) {\n      const canvas = this.canvasRef.current\n      const canvasCtx = canvas.getContext('2d')\n      if (canvasCtx) {\n        canvasCtx.fillStyle = '#f0f0f0'\n        canvasCtx.fillRect(0, 0, canvas.width, canvas.height)\n        \n        // Create gradient for the line\n        const gradient = canvasCtx.createLinearGradient(0, 0, canvas.width, 0)\n        gradient.addColorStop(0, '#ff4b4b')\n        gradient.addColorStop(1, '#ff8b8b')\n        \n        canvasCtx.strokeStyle = gradient\n        canvasCtx.lineWidth = 3\n        canvasCtx.beginPath()\n        canvasCtx.moveTo(0, canvas.height / 2)\n        canvasCtx.lineTo(canvas.width, canvas.height / 2)\n        canvasCtx.stroke()\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.animationId) {\n      cancelAnimationFrame(this.state.animationId)\n    }\n  }\n\n  drawWaveform = () => {\n    if (this.state.analyser && this.canvasRef.current) {\n      const canvas = this.canvasRef.current\n      const canvasCtx = canvas.getContext('2d')\n      const bufferLength = this.state.analyser.frequencyBinCount\n      const dataArray = new Uint8Array(bufferLength)\n\n      const draw = () => {\n        if (!this.state.isRecording) {\n          if (this.state.animationId) {\n            cancelAnimationFrame(this.state.animationId)\n          }\n          return\n        }\n\n        const animationId = requestAnimationFrame(draw)\n        this.setState({ animationId })\n\n        this.state.analyser!.getByteTimeDomainData(dataArray)\n\n        if (canvasCtx) {\n          // Modern background\n          canvasCtx.fillStyle = '#f0f0f0'\n          canvasCtx.fillRect(0, 0, canvas.width, canvas.height)\n\n          // Create gradient for the waveform\n          const gradient = canvasCtx.createLinearGradient(0, 0, canvas.width, 0)\n          gradient.addColorStop(0, '#ff4b4b')\n          gradient.addColorStop(1, '#ff8b8b')\n          \n          canvasCtx.lineWidth = 3\n          canvasCtx.strokeStyle = gradient\n          canvasCtx.beginPath()\n\n          const sliceWidth = (canvas.width * 1.0) / bufferLength\n          let x = 0\n          let lastY = canvas.height / 2\n\n          for (let i = 0; i < bufferLength; i++) {\n            const v = dataArray[i] / 128.0\n            const y = (v * canvas.height) / 2\n\n            // Smooth the line using bezier curves\n            if (i === 0) {\n              canvasCtx.moveTo(x, y)\n            } else {\n              const xc = (x + (x - sliceWidth)) / 2\n              canvasCtx.quadraticCurveTo(x - sliceWidth, lastY, xc, y)\n            }\n\n            lastY = y\n            x += sliceWidth\n          }\n\n          canvasCtx.lineTo(canvas.width, canvas.height / 2)\n          canvasCtx.stroke()\n        }\n      }\n\n      draw()\n    }\n  }\n\n  startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 44100,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      })\n\n      const audioContext = new AudioContext()\n      const source = audioContext.createMediaStreamSource(stream)\n      const analyser = audioContext.createAnalyser()\n      source.connect(analyser)\n      \n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus',\n        audioBitsPerSecond: 128000\n      })\n\n      mediaRecorder.ondataavailable = (e: BlobEvent) => {\n        if (e.data.size > 0) {\n          this.setState((prev: State) => ({\n            chunks: [...prev.chunks, e.data]\n          }))\n        }\n      }\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(this.state.chunks, { type: 'audio/webm;codecs=opus' })\n        \n        // Update UI state\n        this.setState({ \n          chunks: [], \n          audioBlob: blob,\n          isRecording: false,\n          mediaRecorder: null,\n          audioUrl: URL.createObjectURL(blob)\n        })\n        \n        // Convert to array and send\n        blob.arrayBuffer().then(buffer => {\n          const uint8Array = new Uint8Array(buffer)\n          Streamlit.setComponentValue({\n            arr: Object.fromEntries(uint8Array.entries())\n          })\n        })\n      }\n\n      mediaRecorder.start(100)\n      this.setState({ mediaRecorder, isRecording: true, analyser }, this.drawWaveform)\n\n    } catch (err) {\n      console.error(\"Error accessing microphone:\", err)\n    }\n  }\n\n  stopRecording = () => {\n    if (this.state.mediaRecorder && this.state.isRecording) {\n      this.state.mediaRecorder.stop()\n      this.state.mediaRecorder.stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())\n      if (this.state.animationId) {\n        cancelAnimationFrame(this.state.animationId)\n      }\n    }\n  }\n\n  resetRecording = (): void => {\n    if (this.state.animationId) {\n      cancelAnimationFrame(this.state.animationId)\n    }\n\n    this.setState({\n      isRecording: false,\n      audioBlob: null,\n      chunks: [],\n      audioUrl: null,\n      audioData: null,\n      analyser: null,\n      animationId: null\n    })\n    Streamlit.setComponentValue(null)\n  }\n\n  downloadRecording = (): void => {\n    if (this.state.audioBlob) {\n      const datetime = new Date().toLocaleString()\n        .replace(/[\\s,]/g, '')\n        .replace(/_/g, '')\n      const filename = `streamlit_audio_${datetime}.webm`\n\n      const a = document.createElement('a')\n      a.style.display = 'none'\n      a.href = URL.createObjectURL(this.state.audioBlob)\n      a.download = filename\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    }\n  }\n\n  public render = (): ReactNode => {\n    const theme = this.props.theme\n    const style: React.CSSProperties = {}\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isRecording ? '#ff4b4b' : \"#e0e0e0\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <div style={{ padding: '20px', background: 'white', borderRadius: '10px', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' }}>\n        <canvas \n          ref={this.canvasRef} \n          width=\"500\" \n          height=\"100\" \n          style={{ \n            border: 'none',\n            borderRadius: '8px',\n            background: '#f0f0f0',\n            marginBottom: '20px'\n          }}\n        />\n        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n          <button \n            id=\"record\" \n            onClick={this.state.isRecording ? this.stopRecording : this.startRecording}\n            style={{\n              ...style,\n              padding: '8px 16px',\n              borderRadius: '6px',\n              background: this.state.isRecording ? '#ff4b4b' : 'white',\n              color: this.state.isRecording ? 'white' : '#333',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            {this.state.isRecording ? 'Stop Recording' : 'Start Recording'}\n          </button>\n          <button \n            id=\"reset\" \n            onClick={this.resetRecording} \n            style={{\n              ...style,\n              padding: '8px 16px',\n              borderRadius: '6px',\n              background: 'white',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            Reset\n          </button>\n          <button \n            id=\"download\" \n            onClick={this.downloadRecording} \n            style={{\n              ...style,\n              padding: '8px 16px',\n              borderRadius: '6px',\n              background: 'white',\n              cursor: 'pointer',\n              transition: 'all 0.2s ease'\n            }}\n          >\n            Download\n          </button>\n          {this.state.audioUrl && (\n            <audio\n              id=\"audio\"\n              controls\n              src={this.state.audioUrl}\n              style={{ \n                marginLeft: 'auto',\n                width: '250px',\n                height: '40px',\n                borderRadius: '20px'\n              }}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withStreamlitConnection(StreamlitAudioRecorder)\n\nStreamlit.setComponentReady()\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}