{"ast":null,"code":"import _regeneratorRuntime from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _createClass from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";var StreamlitAudioRecorder=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StreamlitAudioRecorder,_StreamlitComponentBa);var _super=_createSuper(StreamlitAudioRecorder);function StreamlitAudioRecorder(props){var _this;_classCallCheck(this,StreamlitAudioRecorder);_this=_super.call(this,props);_this.chunks=[];_this.startRecording=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var stream,mediaRecorder;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return navigator.mediaDevices.getUserMedia({audio:{channelCount:1,sampleRate:44100}});case 3:stream=_context.sent;mediaRecorder=new MediaRecorder(stream);_this.chunks=[];mediaRecorder.ondataavailable=function(e){if(e.data.size>0){_this.chunks.push(e.data);}};mediaRecorder.onstop=function(){var blob=new Blob(_this.chunks,{type:'audio/webm'});_this.setState({audioBlob:blob,isRecording:false});blob.arrayBuffer().then(function(buffer){var uint8Array=new Uint8Array(buffer);Streamlit.setComponentValue(uint8Array);});};mediaRecorder.start();_this.setState({mediaRecorder:mediaRecorder,isRecording:true});_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);console.error(\"Error accessing microphone:\",_context.t0);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));_this.stopRecording=function(){if(_this.state.mediaRecorder&&_this.state.isRecording){_this.state.mediaRecorder.stop();_this.state.mediaRecorder.stream.getTracks().forEach(function(track){return track.stop();});}};_this.resetRecording=function(){if(_this.state.mediaRecorder){_this.state.mediaRecorder.stream.getTracks().forEach(function(track){return track.stop();});}_this.chunks=[];_this.setState({isRecording:false,audioBlob:null,mediaRecorder:null});Streamlit.setComponentValue(null);};_this.render=function(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:_this.state.isRecording?_this.stopRecording:_this.startRecording,style:{marginRight:'10px'}},_this.state.isRecording?'Stop Recording':'Start Recording'),/*#__PURE__*/React.createElement(\"button\",{onClick:_this.resetRecording,disabled:_this.state.isRecording},\"Reset\"),_this.state.audioBlob&&/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'20px'}},/*#__PURE__*/React.createElement(\"audio\",{controls:true,src:URL.createObjectURL(_this.state.audioBlob)})));};_this.state={isRecording:false,mediaRecorder:null,audioBlob:null};return _this;}return _createClass(StreamlitAudioRecorder);}(StreamlitComponentBase);export default withStreamlitConnection(StreamlitAudioRecorder);Streamlit.setComponentReady();Streamlit.setFrameHeight();","map":{"version":3,"sources":["/home/jani/readout_bot/libs/streamlit-audio-recorder/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","StreamlitAudioRecorder","props","chunks","startRecording","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","stream","mediaRecorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","setState","audioBlob","isRecording","arrayBuffer","then","buffer","uint8Array","Uint8Array","setComponentValue","start","console","error","stopRecording","state","stop","getTracks","forEach","track","resetRecording","render","marginRight","marginTop","URL","createObjectURL","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  isRecording: boolean\n  mediaRecorder: MediaRecorder | null\n  audioBlob: Blob | null\n}\n\nclass StreamlitAudioRecorder extends StreamlitComponentBase {\n  private chunks: Blob[] = [];\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      isRecording: false,\n      mediaRecorder: null,\n      audioBlob: null\n    }\n  }\n\n  startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 44100\n        }\n      });\n\n      const mediaRecorder = new MediaRecorder(stream);\n      this.chunks = [];\n\n      mediaRecorder.ondataavailable = (e: BlobEvent) => {\n        if (e.data.size > 0) {\n          this.chunks.push(e.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(this.chunks, { type: 'audio/webm' });\n        this.setState({ audioBlob: blob, isRecording: false });\n        \n        blob.arrayBuffer().then(buffer => {\n          const uint8Array = new Uint8Array(buffer);\n          Streamlit.setComponentValue(uint8Array);\n        });\n      };\n\n      mediaRecorder.start();\n      this.setState({ mediaRecorder, isRecording: true });\n\n    } catch (err) {\n      console.error(\"Error accessing microphone:\", err);\n    }\n  };\n\n  stopRecording = () => {\n    if (this.state.mediaRecorder && this.state.isRecording) {\n      this.state.mediaRecorder.stop();\n      this.state.mediaRecorder.stream.getTracks().forEach((track: MediaStreamTrack) => track.stop());\n    }\n  };\n\n  resetRecording = (): void => {\n    if (this.state.mediaRecorder) {\n      this.state.mediaRecorder.stream.getTracks().forEach((track: MediaStreamTrack) => track.stop());\n    }\n    this.chunks = [];\n    this.setState({\n      isRecording: false,\n      audioBlob: null,\n      mediaRecorder: null\n    });\n    Streamlit.setComponentValue(null);\n  };\n\n  public render = (): ReactNode => {\n    return (\n      <div>\n        <button \n          onClick={this.state.isRecording ? this.stopRecording : this.startRecording}\n          style={{ marginRight: '10px' }}\n        >\n          {this.state.isRecording ? 'Stop Recording' : 'Start Recording'}\n        </button>\n        <button \n          onClick={this.resetRecording}\n          disabled={this.state.isRecording}\n        >\n          Reset\n        </button>\n        {this.state.audioBlob && (\n          <div style={{ marginTop: '20px' }}>\n            <audio\n              controls\n              src={URL.createObjectURL(this.state.audioBlob)}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(StreamlitAudioRecorder);\n\nStreamlit.setComponentReady();\nStreamlit.setFrameHeight();\n"]},"metadata":{},"sourceType":"module"}